//////////////////////////////////////////////////////////////////////
class 빵타입 {
  점검하기(){}
  조립하기(){}
}
class 밀가루빵 {
  점검하기(){console.log('밀가루빵을 점검합니다.')}
  조립하기(){console.log('밀가루빵을 조립합니다.')}
}
class 쌀빵 {
  점검하기(){console.log('쌀빵을 점검합니다.')}
  조립하기(){console.log('쌀빵을 조립합니다.')}
}
class 호밀빵 {
  점검하기(){console.log('호밀빵을 점검합니다.')}
  조립하기(){console.log('호밀빵을 조립합니다.')}
}
//////////////////////////////////////////////////////////////////////
class 고기타입 {
  점검하기(){}
  조립하기(){}
}
class 소고기 {
  점검하기(){console.log('소고기를 점검합니다.')}
  조립하기(){console.log('소고기를 조립합니다.')}
}
class 닭고기 {
  점검하기(){console.log('닭고기를 점검합니다.')}
  조립하기(){console.log('닭고기를 조립합니다.')}
}
class 돼지고기 {
  점검하기(){console.log('돼지고기를 점검합니다.')}
  조립하기(){console.log('돼지고기를 조립합니다.')}
}
//////////////////////////////////////////////////////////////////////
class 소스타입 {
  점검하기(){}
  조립하기(){}
}
class 매운소스 {
  점검하기(){console.log('매운소스를 점검합니다.')}
  조립하기(){console.log('매운소스를 조립합니다.')}
}
class 달콤소스 {
  점검하기(){console.log('달콤소스를 점검합니다.')}
  조립하기(){console.log('달콤소스를 조립합니다.')}
}
class 버터소스 {
  점검하기(){console.log('버터소스를 점검합니다.')}
  조립하기(){console.log('버터소스를 조립합니다.')}
}
//////////////////////////////////////////////////////////////////////

/////////////////////////// 햄버거 제조 방법 ///////////////////////////
class 수제햄버거제조법 {
  만들기(){
    const 빵 = new 밀가루빵()
    빵.점검하기() 
    빵.조립하기()

    const 고기 = new 소고기()
    고기.점검하기()
    고기.조립하기()

    const 소스 = new 매운소스()
    소스.점검하기()
    소스.조립하기()
  }
  제공하기(){
    console.log('주문하신 햄버거 나왔습니다~')
  }
}

class 맥도널드제조법 {
  constructor(private 빵: 빵타입, private 고기: 고기타입, private 소스: 소스타입){}
  만들기(){
    this.빵.점검하기()
    this.빵.조립하기()

    this.고기.점검하기()
    this.고기.조립하기()

    this.소스.점검하기()
    this.소스.조립하기()
  }
  제공하기(){
    console.log('주문하신 햄버거 나왔습니다~')
  }
}
//////////////////////////////////////////////////////////////////////
// 1. 수제햄버거집 - 재료를 스스로 제어
// 2. 맥도널드 - 재료를 본사가 제어(제어의역전 - IoC)하고 체인점에 주입(의존성주입 - DI)
//             *) 본사의 재료 변경시, 여러 체인점에 동시에 적용 가능
// 
// 정리: 햄버거집(리졸버)이 몇 개 없는 경우, 2~3개의 수제햄버거집에서 재료(서비스)를 만들어도 되지만,
//      햄버거집(리졸버)이 대규모가 되는 경우, 본사(Nest)에서 체인점(리졸버)으로 재료(서비스)를 주입해 주는 것이 좋음.
//      해당 재료(서비스)를 사용하고 있는 체인점(리졸버)을 모두 동시에 변경 가능하기 때문
//
// 예제: 맥도널드미국점(상품리졸버)과 맥도널드한국점(회원리졸버)의 대부분의 재료(서비스)는 매콤소스(SMS알람기능)을 사용하고 있었지만,
//      맥도널드한국점(회원리졸버)에서 사용되는 재료(서비스)는 한국인의 특성에 맞게 매콤달콤소스(SMS알람기능+EMAIL알람기능)로 변경해야 하는 경우
//      매콤소스(SMS알람기능)를 수정하지 않고, 매콤달콤소스(SMS알람기능+EMAIL알람기능)를 만들어서 맥도널드한국점(회원리졸버)에 주입
//////////////////////////////////////////////////////////////////////

//////////////////////////// 햄버거 주문 방법 /////////////////////////////
const 수제햄버거 = new 수제햄버거제조법()
수제햄버거.만들기()
수제햄버거.제공하기()
// ////////////////////////////////////////////////////////////////

// ///////////////////////// 햄버거 주문 방법  /////////////////////////////
const 빵 = new 밀가루빵()
const 고기 = new 소고기()
const 소스 = new 매운소스()
const 맥도널드햄버거 = new 맥도널드제조법(빵, 고기, 소스)
맥도널드햄버거.만들기()
맥도널드햄버거.제공하기()
// ////////////////////////////////////////////////////////////////


